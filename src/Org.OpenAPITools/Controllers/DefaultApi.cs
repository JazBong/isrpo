/*
 * Sample Music Catalog API
 *
 * API для управления артистами, альбомами и песнями в музыкальном каталоге.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DefaultApiController : ControllerBase
    { 
        /// <summary>
        /// Получить список артистов
        /// </summary>
        /// <response code="200">Список артистов</response>
        [HttpGet]
        [Route("/artists")]
        [ValidateModelState]
        [SwaggerOperation("ArtistsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Artist>), description: "Список артистов")]
        public virtual IActionResult ArtistsGet()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Artist>));
            string exampleJson = null;
            exampleJson = "[ {\r\n  \"albums\" : [ \"albums\", \"albums\" ],\r\n  \"name\" : \"name\",\r\n  \"genre\" : \"genre\",\r\n  \"id\" : \"id\"\r\n}, {\r\n  \"albums\" : [ \"albums\", \"albums\" ],\r\n  \"name\" : \"name\",\r\n  \"genre\" : \"genre\",\r\n  \"id\" : \"id\"\r\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Artist>>(exampleJson)
            : default(List<Artist>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Получить информацию об артисте по ID
        /// </summary>
        /// <param name="id"></param>
        /// <response code="200">Информация об артисте</response>
        /// <response code="404">Артист не найден</response>
        [HttpGet]
        [Route("/artists/{id}")]
        [ValidateModelState]
        [SwaggerOperation("ArtistsIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Artist), description: "Информация об артисте")]
        public virtual IActionResult ArtistsIdGet([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Artist));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"albums\" : [ \"albums\", \"albums\" ],\r\n  \"name\" : \"name\",\r\n  \"genre\" : \"genre\",\r\n  \"id\" : \"id\"\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Artist>(exampleJson)
            : default(Artist);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Добавить нового артиста
        /// </summary>
        /// <param name="artist"></param>
        /// <response code="201">Артист добавлен</response>
        [HttpPost]
        [Route("/artists")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ArtistsPost")]
        public virtual IActionResult ArtistsPost([FromBody]Artist artist)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            throw new NotImplementedException();
        }
    }
}
